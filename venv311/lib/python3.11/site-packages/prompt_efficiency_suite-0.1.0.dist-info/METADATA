Metadata-Version: 2.4
Name: prompt-efficiency-suite
Version: 0.1.0
Summary: A suite of tools for optimizing LLM prompts
Home-page: https://github.com/yourusername/prompt-efficiency-suite
Author: Your Name
Author-email: your.email@example.com
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: click>=8.0.0
Requires-Dist: rich>=10.0.0
Requires-Dist: spacy>=3.0.0
Requires-Dist: pyyaml>=5.0.0
Requires-Dist: pytest>=6.0.0
Requires-Dist: pytest-cov>=2.0.0
Requires-Dist: fastapi>=0.68.0
Requires-Dist: uvicorn>=0.15.0
Requires-Dist: python-multipart>=0.0.5
Requires-Dist: python-jose[cryptography]>=3.3.0
Requires-Dist: passlib[bcrypt]>=1.7.4
Requires-Dist: requests>=2.26.0
Requires-Dist: httpx>=0.19.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Prompt Efficiency Suite

A comprehensive toolkit for optimizing, managing, and deploying LLM prompts with enterprise-grade features.

[![Python Version](https://img.shields.io/badge/python-3.8%2B-blue.svg)](https://www.python.org/downloads/)
[![FastAPI](https://img.shields.io/badge/FastAPI-0.68.0%2B-green.svg)](https://fastapi.tiangolo.com/)
[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)

## Features

### 1. Domain-Aware Trimmer
- Smart text optimization preserving domain-specific terminology
- Configurable preservation ratios and patterns
- Custom dictionary management
- Token-aware trimming strategies

### 2. CI/CD Integration
- Automated testing and deployment pipeline
- Test coverage reporting
- Deployment status tracking
- Artifact management
- Integration with popular CI/CD platforms

### 3. Real-Time Adaptive Budgeting
- Token usage tracking and optimization
- Cost management across multiple LLM models
- Configurable budget thresholds and alerts
- Usage analytics and reporting
- Support for:
  - GPT-4
  - GPT-3.5-turbo
  - Claude-2

### 4. CLI Interface
- Interactive command-line tools
- Rich console output
- Progress tracking
- Configuration management
- Commands for all core functionalities

### 5. REST API
- FastAPI-based REST endpoints
- JWT authentication
- OpenAPI documentation
- Rate limiting
- Comprehensive error handling

## Installation

### Using pip
```bash
pip install prompt-efficiency-suite
```

### From source
```bash
git clone https://github.com/yourusername/prompt-efficiency-suite.git
cd prompt-efficiency-suite
pip install -e .
```

## Quick Start

### CLI Usage
```bash
# Trim text while preserving domain terminology
prompt-efficiency trim --input input.txt --domain technical --ratio 0.8

# Monitor token budget
prompt-efficiency budget --model gpt-4 --threshold 1000

# Run CI/CD tests
prompt-efficiency cicd test
```

### API Usage
```python
from prompt_efficiency_suite import DomainAwareTrimmer, AdaptiveBudgeting

# Initialize trimmer
trimmer = DomainAwareTrimmer()
trimmer.load_domain("technical")

# Trim text
result = trimmer.trim(
    text="Your input text here",
    preserve_ratio=0.8
)

# Monitor budget
budget = AdaptiveBudgeting()
metrics = budget.get_metrics("gpt-4")
```

## Infrastructure

### Local Development
```bash
# Start services
docker-compose up

# Run tests
docker-compose run tests
```

### Kubernetes Deployment
```bash
# Apply configurations
kubectl apply -f k8s/configmap.yaml
kubectl apply -f k8s/secret.yaml
kubectl apply -f k8s/deployment.yaml
kubectl apply -f k8s/ingress.yaml
```

## API Documentation

### Authentication
```python
import requests

# Get access token
response = requests.post(
    "http://localhost:8000/token",
    data={"username": "user", "password": "pass"}
)
token = response.json()["access_token"]

# Use token in requests
headers = {"Authorization": f"Bearer {token}"}
```

### Endpoints

#### Text Trimming
- `POST /trim`
  ```json
  {
    "text": "Your text here",
    "domain": "technical",
    "preserve_ratio": 0.8
  }
  ```

#### Budget Management
- `GET /budget/metrics`
- `POST /budget/metrics/reset`
- `GET /budget/alerts`

#### CI/CD Operations
- `POST /cicd/tests`
- `POST /cicd/deploy`

## Configuration

### Environment Variables
```bash
DEBUG=1  # Enable debug mode
SECRET_KEY=your-secret-key
PYTHONPATH=/app/src
LOG_LEVEL=INFO
```

### Domain Dictionary Format
```json
{
  "terms": ["api", "endpoint", "token"],
  "compound_terms": ["api key", "rate limit"],
  "preserve_patterns": ["[A-Z]{2,}"],
  "remove_patterns": ["TODO", "FIXME"]
}
```

## Development

### Project Structure
```
prompt-efficiency-suite/
├── src/
│   └── prompt_efficiency_suite/
│       ├── domain_aware_trimmer.py
│       ├── adaptive_budgeting.py
│       ├── cicd_integration.py
│       ├── api.py
│       └── cli.py
├── tests/
├── k8s/
├── Dockerfile
├── docker-compose.yml
└── setup.py
```

### Running Tests
```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=prompt_efficiency_suite

# Run specific test file
pytest tests/test_api.py
```

### Contributing
1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Run tests
5. Submit a pull request

## Performance Considerations

### Token Optimization
- Efficient token counting algorithms
- Caching for frequently used terms
- Batch processing support

### Scaling
- Horizontal scaling with Kubernetes
- Load balancing
- Resource optimization

### Security
- JWT authentication
- Rate limiting
- Input validation
- Secure secret management

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Support

- Documentation: [https://prompt-efficiency-suite.readthedocs.io/](https://prompt-efficiency-suite.readthedocs.io/)
- Issues: [GitHub Issues](https://github.com/yourusername/prompt-efficiency-suite/issues)
- Discussions: [GitHub Discussions](https://github.com/yourusername/prompt-efficiency-suite/discussions)

## Roadmap

- [ ] Enhanced domain dictionary management
- [ ] Additional LLM model support
- [ ] Advanced budget optimization algorithms
- [ ] Extended CI/CD integrations
- [ ] GraphQL API
- [ ] Web interface
- [ ] Multi-tenant support
- [ ] Advanced analytics dashboard 
