from threading import TIMEOUT_MAX as TIMEOUT_MAX
from threading import Barrier as Barrier
from threading import BoundedSemaphore as BoundedSemaphore
from threading import BrokenBarrierError as BrokenBarrierError
from threading import Condition as Condition
from threading import Event as Event
from threading import ExceptHookArgs as ExceptHookArgs
from threading import Lock as Lock
from threading import RLock as RLock
from threading import Semaphore as Semaphore
from threading import Thread as Thread
from threading import ThreadError as ThreadError
from threading import Timer as Timer
from threading import _DummyThread as _DummyThread
from threading import _RLock as _RLock
from threading import excepthook as excepthook

from _threading_local import local as local
from _typeshed import ProfileFunction, TraceFunction

__all__ = [
    "get_ident",
    "active_count",
    "Condition",
    "current_thread",
    "enumerate",
    "main_thread",
    "TIMEOUT_MAX",
    "Event",
    "Lock",
    "RLock",
    "Semaphore",
    "BoundedSemaphore",
    "Thread",
    "Barrier",
    "BrokenBarrierError",
    "Timer",
    "ThreadError",
    "setprofile",
    "settrace",
    "local",
    "stack_size",
    "ExceptHookArgs",
    "excepthook",
]

def active_count() -> int: ...
def current_thread() -> Thread: ...
def currentThread() -> Thread: ...
def get_ident() -> int: ...
def enumerate() -> list[Thread]: ...
def main_thread() -> Thread: ...
def settrace(func: TraceFunction) -> None: ...
def setprofile(func: ProfileFunction | None) -> None: ...
def stack_size(size: int | None = None) -> int: ...
